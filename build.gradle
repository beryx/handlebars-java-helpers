import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.plugins.signing.Sign

plugins {
    id 'idea'
    id 'maven-publish'
    id "com.github.ethankhall.semantic-versioning" version "1.1.0"
    id "com.github.ben-manes.versions" version "0.13.0"
    id "com.jfrog.bintray" version "1.7.1"
    id "org.asciidoctor.convert" version "1.5.3"
    id 'org.ajoberstar.github-pages' version '1.6.0-rc.1'
    id "com.github.hierynomus.license" version "0.13.1"
    id "net.saliman.properties" version "1.4.5"
    id 'com.github.jk1.dependency-license-report' version '0.3.5'
}

project.version.with {
    major = hbsHelpersVersionMajor as int
    minor= hbsHelpersVersionMinor as int
    patch = hbsHelpersVersionPatch as int
    if (project.hasProperty('hbsHelpersVersionLabel')) {
        preRelease = hbsHelpersVersionLabel
    }
    releaseBuild = Boolean.valueOf(hbsHelpersReleaseBuild)
}
ext.hbsHelpersVersion = project.version as String

repositories {
  jcenter()
  mavenCentral()
}

def pomConfig = {
    url "https://github.com/beryx/handlebars-java-helpers"
    developers {
        developer {
            id "siordache"
            name "Serban Iordache"
        }
    }
    scm {
        connection "https://github.com/beryx/handlebars-java-helpers.git"
        developerConnection "https://github.com/beryx/handlebars-java-helpers"
        url "https://github.com/beryx/handlebars-java-helpers"
    }
}

ext.groovyVersion = '2.4.7'


tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:all,-syntax,-missing', '-quiet')
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'findbugs'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'signing'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'com.github.jk1.dependency-license-report'


repositories {
    jcenter()
    mavenCentral()
}

sourceCompatibility = 1.6
group = 'org.beryx'
version = hbsHelpersVersion

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

[compileGroovy, compileTestGroovy]*.options*.encoding = defaultEncoding
[compileGroovy, compileTestGroovy]*.groovyOptions*.encoding = defaultEncoding

sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDirs = ["src/main/java", "src/main/groovy"]

configurations {
  provided
  compile {transitive = true}
}

license {
    exclude '*.txt'
    header rootProject.file("license-header.txt")
    skipExistingHeaders true
    ignoreFailures false
}

signing {
    sign configurations.archives
}

def isPublishTask(task) {
  task.name.startsWith('publish') && (task.name != 'publishGhPages')
}

signArchives {
  onlyIf { gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)} }
}

dependencies {
  compile "org.codehaus.groovy:groovy-all:$groovyVersion"
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
  compile 'com.github.jknack:handlebars:4.0.6'

  provided 'com.google.code.findbugs:findbugs-annotations:3.0.1'

  testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
  testCompile 'org.yaml:snakeyaml:1.17'
  testCompile('org.spockframework:spock-core:1.1-groovy-2.4-rc-2') {
      exclude module: 'groovy-all'
  }
  testCompile 'cglib:cglib-nodep:3.2.4'
  testCompile 'org.objenesis:objenesis:2.4'
  testCompile('com.athaydes:spock-reports:1.2.12') { transitive = false}

}

sourceSets.main.compileClasspath += configurations.provided

findbugs {
    effort = "max"
    excludeFilter = file("findbugsExclude.xml")
}

jar {
    manifest {
        attributes 'Implementation-Title': "${project.archivesBaseName}",
                'Implementation-Version': hbsHelpersVersion,
                'Implementation-Vendor-Id': 'beryx.org'
    }

    from ("src/main/java") {
        include('**/*.fxml')
        include('**/*.css')
        include('**/*.png')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: classes) {
    classifier "javadoc"
    from groovydoc
}

configureGroovydoc(groovydoc)

def configureGroovydoc(task) {
  configure(task) {
      docTitle "Handlebars.java Helpers Documentation ($hbsHelpersVersion)"
      windowTitle "Handlebars.java Helpers Documentation ($hbsHelpersVersion)"

    if(project.configurations.hasProperty('provided')) {
        classpath += project.configurations.provided
    }
    link "http://docs.oracle.com/javase/8/docs/api/", 'java'
    link "http://docs.groovy-lang.org/docs/groovy-$groovyVersion/html/gapi/", "groovy"
  }
}

artifacts {
    (System.getenv("TRAVIS") == "true") ? archives(sourcesJar) : archives(sourcesJar, groovydocJar)
}

asciidoctor {
  sourceDir = file("doc")
  sources {include 'index.adoc'}
  logDocuments = true
  attributes 'source-highlighter': 'coderay',
             'coderay-linenums-mode': 'table',
             icons: 'font',
             imagesdir: 'img',
             'data-uri': '',
             linkattrs: true,
             linkcss: true
}

task deleteGHPagesRepo(type: Delete) {
   delete "${project.buildDir}/ghpages"
}

publishGhPages.dependsOn deleteGHPagesRepo

githubPages {
  repoUri = 'https://github.com/beryx/handlebars-java-helpers.git'

  credentials {
    username = System.getenv('GH_PAGES_ACCESS_TOKEN')
    password = ''
  }

  pages {
    def pgType = project.hasProperty('ghPageType') ? ghPageType : 'latest'
    if(pgType == 'init') {
      from file("ghpages")
    } else {
      from file("${asciidoctor.outputDir.path}/html5")
      from file("build/docs")
    }
    def docDir = Boolean.valueOf(hbsHelpersReleaseBuild) ? 'releases' : 'snapshots'
    if(pgType == 'init') {
      into "."
    } else if(pgType == 'version') {
      publishGhPages.enabled = (docDir != 'snapshots')
      into "$docDir/$hbsHelpersVersion"
    } else {
      into "$docDir/latest"
    }
  }
}

publishing {
    publications {
        hbsHelpers(MavenPublication) {
            from components.java
            artifact sourcesJar { classifier "sources" }
            artifact groovydocJar { classifier "javadoc" }
            groupId 'org.beryx'
            artifactId "handlebars-java-helpers"
            version hbsHelpersVersion
            pom.withXml {
                def root = asNode()
                root.appendNode('name', "handlebars-java-helpers")
                root.appendNode('description', "The Handlebars.java Helpers artifact")
                root.children().last() + pomConfig

                // We cannot configure the licenses in pomConfig due to a name conflict with the 'license' extension defined by the com.github.hierynomus.license plugin
                def licenseNode = root.appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                licenseNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                licenseNode.appendNode('distribution', 'repo')
            }
        }
    }
}

task "create-dirs" << {
   sourceSets*.java.srcDirs*.each { it.mkdirs() }
   sourceSets*.groovy.srcDirs*.each { it.mkdirs() }
   sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}


///////////  ECLIPSE  //////////////////
def resourcesDir = 'src/main/resources/'
eclipse.classpath.file {
    beforeMerged { classpath ->
        classpath.entries.removeAll()
    }
    whenMerged { classpath ->
        classpath.entries.findAll { entry -> entry.kind == 'lib' }*.exported = true
        classpath.entries.removeAll { entry -> entry.kind == 'src' && entry.path.contains('/resources') }
        classpath.entries.add(new org.gradle.plugins.ide.eclipse.model.SourceFolder(resourcesDir, null))
        classpath.entries.findAll { entry -> entry.kind == 'con' && entry.path.contains('StandardVMType') }.each { entry ->
            entry.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule('accessible', 'javafx/**'))
        }
    }
}

eclipse {
    project {
        file.beforeMerged { project ->
            project.natures.clear()
        }
    }
    classpath {
        plusConfigurations << configurations.provided
    }
}

/////////////  IDEA  ///////////////////
idea {
  module {
    scopes.PROVIDED.plus += [configurations.provided]
  }
}


def gitIgnore = file(".gitignore").readLines()
def gitIgnoreDirs = gitIgnore*.trim().findAll { !it.startsWith("#") && it.endsWith("/") }

idea {
  module {
    outputFile = file("hbsHelpers.iml")
  }
  project {
    languageLevel = "1.8"
    outputFile = file('hbsHelpers.ipr')
    ipr {
      withXml { provider ->
        def vcsDirMap = provider.node.component.find { it.@name == 'VcsDirectoryMappings' }
        if(vcsDirMap) {
          vcsDirMap.mapping.@directory = '$PROJECT_DIR$/..'
          vcsDirMap.mapping.@vcs = 'Git'
        }
      }
    }
    configure(modules) { module ->
      excludeDirs = module.project.files(gitIgnoreDirs) as Set
    }
  }
}

ideaWorkspace {
  outputFile = file('hbsHelpers.iws')
}

def readFromConsole(prompt) {
    readFromConsole('', prompt)
}
def readFromConsole(header, prompt) {
    readFromConsole(header, prompt, false)
}
def readPasswordFromConsole(prompt) {
    readPasswordFromConsole(prompt, true)
}
def readPasswordFromConsole(header, prompt) {
    readFromConsole(header, prompt, true)
}
def readFromConsole(header, prompt, isPassword) {
    def console = System.console()
    if (console) {
        if(header) {
            console.printf "\n\n# $header\n"
        }
        String value = null;
        while(!value?.trim()) {
            def val = console."read${isPassword ? 'Password' : 'Line'}"("> $prompt: ")
            if(val) {
                value = new String(val)
            }
        }
        return value
    } else {
        throw new GradleException("Cannot get console.")
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)}) {
        def password = readPasswordFromConsole('Please enter your signing credentials', 'PGP Private Key Password')
        ext."signing.keyId" = signingKeyId
        ext."signing.secretKeyRingFile" = signingSecretKeyRingFile
        ext."signing.password" = password
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : "unknownUser"
    key =  project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : "unknownKey"
    publications = ["hbsHelpers"]
    pkg {
        repo = 'maven'
        name = 'handlebars-java-helpers'
        userOrg = 'beryx'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/beryx/handlebars-java-helpers.git'

        version {
                name = hbsHelpersVersion
                desc = "Handlebars.java Helpers $hbsHelpersVersion"
                released  = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZZ")
                vcsTag = hbsHelpersVersion
                gpg {
                    sign = true
                }
        }
    }
}
